// Generated by CoffeeScript 1.10.0
(function() {
  var StaticHandlebarsCompiler, fs, glob, handlebars, mkdirp, sysPath;

  handlebars = require("handlebars");

  sysPath = require("path");

  fs = require("fs");

  glob = require("glob");

  mkdirp = require("mkdirp");

  module.exports = StaticHandlebarsCompiler = (function() {
    StaticHandlebarsCompiler.prototype.brunchPlugin = true;

    StaticHandlebarsCompiler.prototype.type = "template";

    StaticHandlebarsCompiler.prototype.extension = "hbs";

    function StaticHandlebarsCompiler(config) {
      var absoluteFile, includeFile, ref, ref1, ref2, ref3, ref4, ref5;
      this.config = config;
      this.outputDirectory = ((ref = this.config) != null ? (ref1 = ref.plugins) != null ? (ref2 = ref1.staticHandlebars) != null ? ref2.outputDirectory : void 0 : void 0 : void 0) || 'public';
      includeFile = (ref3 = this.config) != null ? (ref4 = ref3.plugins) != null ? (ref5 = ref4.staticHandlebars) != null ? ref5.includeFile : void 0 : void 0 : void 0;
      if (includeFile != null) {
        absoluteFile = sysPath.join(sysPath.resolve('./'), includeFile);
        this.extras = require(absoluteFile);
      }
    }

    StaticHandlebarsCompiler.prototype.withPartials = function(callback) {
      var errThrown, partials;
      partials = {};
      errThrown = false;
      return glob("app/templates/_*.hbs", (function(_this) {
        return function(err, files) {
          if (err != null) {
            return callback(err);
          } else if (!files.length) {
            return callback(null, partials);
          } else {
            return files.forEach(function(file) {
              var name;
              name = sysPath.basename(file, ".hbs").substr(1);
              return fs.readFile(file, function(err, data) {
                if ((err != null) && !errThrown) {
                  errThrown = true;
                  return callback(err);
                } else {
                  partials[name] = data.toString();
                  if (Object.keys(partials).length === files.length) {
                    return callback(null, partials);
                  }
                }
              });
            });
          }
        };
      })(this));
    };

    StaticHandlebarsCompiler.prototype.compile = function(data, path, callback) {
      var basename, context, err, error, template;
      try {
        basename = sysPath.basename(path, ".hbs");
        template = handlebars.compile(data);
        context = this.extras ? this.extras(handlebars) : {};
        return this.withPartials((function(_this) {
          return function(err, partials) {
            var html, newPath;
            if (err != null) {
              return callback(err);
            } else {
              html = template(context, {
                partials: partials,
                helpers: _this.makeHelpers(partials)
              });
              newPath = _this.outputDirectory + path.slice(13, -4) + ".html";
              mkdirp.sync(sysPath.dirname(newPath));
              return fs.writeFile(newPath, html, function(err) {
                return callback(err, null);
              });
            }
          };
        })(this));
      } catch (error) {
        err = error;
        return callback(err, null);
      }
    };

    StaticHandlebarsCompiler.prototype.makeHelpers = function(partials) {
      return {
        partial: function(partial, options) {
          return new handlebars.SafeString(handlebars.compile(partials[partial])(options.hash));
        }
      };
    };

    return StaticHandlebarsCompiler;

  })();

}).call(this);
